Anagram :
import java.util.Arrays;
import java.util.Scanner;
public class Anagram {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        String str1 = scan.nextLine();
        String str2 = scan.nextLine();;
        char[] array1 = str1.toCharArray();
        char[] array2 = str2.toCharArray();
        Arrays.sort(array1);
        Arrays.sort(array2);
            if(Arrays.equals(array1, array2)){
                System.out.print("true");
            }
            else{
                System.out.print("false");
        }
    }
}
//another method
/*public static boolean isAnagram(String str1, String str2){
        int freq[] = new int[26];
        for(char ch : str1.toCharArray()){
            freq[ch-'a']++;
        }
        for(char ch :str2.toCharArray()){
            freq[ch-'a']--;
        }
        for(int n : freq){
            if(n != 0){
                return false;
            }
        }
        return true;
    }
}*/
~~~~~~~~~~~~~~~~~~~~~
2D array :
import java.util.*;
public class array2D {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int m = scan.nextInt();
        int[][] arr = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = scan.nextInt();
            }
        }for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
        System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}
~~~~~~~~~~~~~~~~~~~
Binary search :

import java.util.*;
public class Binarysearch {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int [] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        Arrays.sort(arr);
        int key = scan.nextInt();
        boolean found = false;
        int start = 0, end = size-1;
        while(start <= end){
            int mid = (start + end)/2;
            if (arr[mid] == key) {
                found = true;
                break;
            }
            else if(arr[mid] < key){
                start = start+1;
            }
            else{
                end = end - 1;
            }
        }
        System.out.print(found);
    }
}
~~~~~~~~~~~~~~~~
  Binary string :
import java.util.*;
public class BinaryString {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        // Find the number of bits in the binary representation
        int numBits = Integer.toBinaryString(n).length();
        // Create a mask with all bits set to 1 for that length
        int mask = (1 << numBits) - 1;
        // Toggle bits using XOR with mask
        int result = n ^ mask;
        System.out.println(result);
    }
}
~~~~~~~~~~~~~~~
Boxpattern :

import java.util.*;
public class Boxpattern{
    public static void main(String [] args){
        Scanner scan = new Scanner(System.in);
        int num = scan.nextInt();
        for(int row=1;row<=num;row++){
            for(int col=1;col<=num;col++){
                if(row==1 || col==1 || row==num || col==num)
                    System.out.print(col);
                else
                    System.out.print(" ");
            }
            System.out.println();
        }
    }
}
~~~~~~~~~~~~~~
Calculate the factorial :

import java.util.*;
public class Calculatefactorial {
    // Function to calculate factorial
    public static int factorial(int num) {
        int fact = 1;
        for(int i = 2; i <= num; i++) {
            fact *= i;
        }
        return fact;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        if(N < 2 || N >= 10) {
            System.out.println("Invalid input");
            return;
        }
        int result = 2 * factorial(N - 1);
        System.out.println(result);
    }
}
~~~~~~~~~~~~~~
Character triangle pattern :

import java.util.*;
public class charactertriangle {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        String str = scan.next();
        for(int row=0;row<str.length();row++){
            for(int col=0;col<=row;col++){
                System.out.print(str.charAt(col));
            }
            System.out.println();
        }
    }
}
~~~~~~~~~~~~~~~~
Check valid password or Not :

import java.util.*;
public class Checkvalidpassword {
    public static void main(String[] atgs){
        Scanner scan = new Scanner(System.in);
        String str = scan.nextLine();
        if(isValidpassword(str)){
            System.out.print(str+" is a valid password");
        }
        else{
            System.out.print(str+" is an inValid password");
        }
    }
    public static boolean isValidpassword(String str){
        String res = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=!])(?=\\s+$).{8,20}$";
        return str.matches(res);
    }
    // Another method to check password validity without regex
    public static boolean isValidPasswordSimple(String str) {
        if (str.length() < 8 || str.length() > 20) return false;
        boolean hasDigit = false, hasLower = false, hasUpper = false, hasSpecial = false, hasWhitespace = false;
        String specialChars = "@#$%^&+=!";
        for (char c : str.toCharArray()) {
            if (Character.isDigit(c)) hasDigit = true;
            else if (Character.isLowerCase(c)) hasLower = true;
            else if (Character.isUpperCase(c)) hasUpper = true;
            else if (specialChars.indexOf(c) >= 0) hasSpecial = true;
            else if (Character.isWhitespace(c)) hasWhitespace = true;
        }
        return hasDigit && hasLower && hasUpper && hasSpecial && !hasWhitespace;
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~
count the integer :

import java.util.*;
public class countinteger {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        System.out.print((" "+n+" ").length());
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~
Delete the duplicate in an array : 

import java.util.Arrays;
import java.util.Scanner;
public class Deleteduplicate {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] num = new int[n];
        for(int i = 0; i < n; i++){
            num[i] = scan.nextInt();
        }
        int result = removeDuplicates(num);
        for(int i = 0; i < result; i++){
            System.out.print(num[i] + " ");
        }
    }
    public static int removeDuplicates(int[] num){
        Arrays.sort(num); // Make sure duplicates are adjacent
        int len = num.length;
        if(len == 0){
            return 0;
        }
        int j = 0;
        for(int i = 1; i < len; i++){
            if(num[i] != num[j]){
                j++;
                num[j] = num[i];
            }
        }
        return j + 1; // return the new length after loop completes
    }
}
~~~~~~~~~~~~~~~~~~~~~~~
Down triangle pattern :

import java.util.*;
public class Downtriangle {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        for(int i=n;i>=1;i--){
            for(int j=1;j<=i;j++){
                System.out.print(j);
            }
            for(int k=1;k<=2*(n-i);k++){
                System.out.print(" ");
            }
            for(int j=i;j>=1;j++){
                System.out.print(j);
            }
            System.out.println();
        }
    }
}
~~~~~~~~~~~~~~~~~~~~~
Duplicate Element in the Array :

import java.util.*;
public class DuplicateElementArray {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int result = Duplicatevalue(arr,size);
        System.out.println(result);
    }
        public static int Duplicatevalue(int arr[],int size){
        /*  for(int i=0;i<size;i++){
                int index = Math.abs(arr[i]);
                if(arr[index] < 0){
                    return index;
                }
                arr[index] = -arr[index];
            }
            return -1;
        }*/
        for(int i = 0; i < size; i++) {
        for(int j = i + 1; j < size; j++) {
            if(arr[i] == arr[j]) {
            return arr[i];
            }
        }
    }
            return -1;
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~
Exactly didvide :
import java.util.*;
public class Exactlydivide {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int target = scan.nextInt();
        int great =0;
        int less =0;
        int divide =0;
        for(int i=0;i<size;i++){
            if(arr[i] > target){
                great++;
            }
            else if(arr[i] < target){
                less++;
            }
            else if(arr[i] % target == 0){
                divide++;
            }
        }
        System.out.println("greaster : "+great);
        System.out.println("lesser : "+less);
        System.out.println("Exactly divide : "+divide);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~
Flames game :
import java.util.*;
public class flames {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String str1 = scan.nextLine().toLowerCase();
        String str2 = scan.nextLine().toLowerCase();
        StringBuilder name1 = new StringBuilder(str1);
        StringBuilder name2 = new StringBuilder(str2);
        for(int i=0;i<name1.length();i++){
            char ch = name1.charAt(i);
            int idx = name2.indexOf(String.valueOf(ch));
            if(idx != -1){
                name1.deleteCharAt(i);
                name2.deleteCharAt(idx);
                i++;
            }
        }
        int count = name1.length() + name2.length();
        String flames = "FLAMES";
        String[] result = {"Friends","Love","Affection","Marriage","Enemy","Sibling"};
        int idx = 0;
        int len = flames.length();
        while(len > 1){
            idx = (count % len == 0) ? len -1 : (count % len) - 1;
            flames = flames.substring(idx + 1) + flames.substring(0, idx);
            len = flames.length();
        }
        char res = flames.charAt(0);
        String output = "";
        switch (res){
            case 'F': output = "Friends";
            break;
            case 'L': output = "Love";
            break;
            case 'A': output = "Affection";
            break;
            case 'M': output = "Marriage";
            break;
            case 'E': output = "Enemy";
            break;
            case 'S': output = "Sibling";
            break;
        }
        System.out.print(output);
    }
}
//Anthor method of the flames :

import java.util.*;
public class FlamesGame {
    // Function to find out the flames result
    public static void flame(char[] a, char[] b) {
        int l = 1, sc = 0, rc = 0, fc = 5;
        String f = "flames";
        char[] flames = f.toCharArray();
        String q = new String(a);
        String w = new String(b);
        int n = a.length;
        int m = b.length;
        int tc = n + m;
        for (int i = 0; i < n; i++) {
            char c = a[i];
            for (int j = 0; j < m; j++) {
                if (c == b[j]) {
                    a[i] = b[j] = '-'; // mark the matched characters with '-'
                    sc += 2;
                    break;
                }
            }
        }
        rc = tc - sc;
        int i = 0;
        while (i >= 0) {
            if (l == rc) {
                for (int k = i; k < f.length()-1; k++) {
                    flames[k] = flames[k + 1];
                }
                flames[flames.length-1] = '0';
                fc--;
                i--;
                l = 0;
            }
            if (i == fc) {
                i = -1;
            }
            if (fc == 0) {
                break;
            }
            l++;
            i++;
        }
        // Print the results
        char result = flames[0];
        switch (result) {
            case 'e':
                System.out.println(q + " is ENEMY to " + w);
                break;
            case 'f':
                System.out.println(q + " is FRIEND to " + w);
                break;
            case 'm':
                System.out.println(q + " is going to MARRY " + w);
                break;
            case 'l':
                System.out.println(q + " is in LOVE with " + w);
                break;
            case 'a':
                System.out.println(q + " has more AFFECTION on " + w);
                break;
            default:
                System.out.println(q + " and " + w + " are SISTERS/BROTHERS ");
                break;
        }
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String a = scan.nextLine();
        String b = scan.nextLine();
        char[] charA = a.toCharArray();
        char[] charB = b.toCharArray();
        flame(charA, charB);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~
Calculate the GCD values : 

import java.util.*;
public class GCD {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n1 = scan.nextInt();
        int n2 = scan.nextInt();
        int gcd = 1;
        for(int i=1;i<=n1 && i<=n2;i++){
            if(n1%i == 0 && n2%i == 0){
                gcd =i;
            }
        }
        System.out.println(gcd);
    }
}
//another method 
while(n1 != n2){
    if(n1 > n2){
        n1 = n1- n2;
    }
    if(n2 > n1){
        n2 = n2 - n1;
    }
}
System.out.print(n1);
}
}
~~~~~~~~~~~~~~~~~~~~
Calculate the LCM value :

import java.util.*;
public class LCM {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int a = scan.nextInt();
        int b = scan.nextInt();
        int lcm = (a*b)/gcd(a,b);
        System.out.print(lcm);
    }
    public static int gcd(int a,int b){
        while(b != 0){
            int temp = b;
            b = a%b;
            a = temp;
        }
        return a;
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Largest Row from Column sum :

import java.util.Scanner;
public class LargestRowColumnSum {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int R = scan.nextInt();
        int C = scan.nextInt();
        int[][] matrix = new int[R][C];
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                matrix[i][j] = scan.nextInt();
            }
        }
        int maxRowSum = 0;
        for (int i = 0; i < R; i++) {
            int rowSum = 0;
            for (int j = 0; j < C; j++) {
                rowSum += matrix[i][j];
            }
            if (rowSum > maxRowSum) {
                maxRowSum = rowSum;
            }
        }
        int maxColSum = 0;
        for (int j = 0; j < C; j++) {
            int colSum = 0;
            for (int i = 0; i < R; i++) {
                colSum += matrix[i][j];
            }
            if (colSum > maxColSum) {
                maxColSum = colSum;
            }
        }
        int result = maxRowSum + maxColSum;
        System.out.println(result);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~
Left Rotation of Array : 

import java.util.*;
public class Leftrotation {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int rotat = scan.nextInt();
        int j=1;
        while(j<=rotat){
        for(int i=size-1;i>0;i--){
            int temp = arr[i];
            arr[i] = arr[i-1];
            arr[i-1] = temp;
        }
        j++;
    }
            System.out.println(Arrays.toString(arr));
        }
    }
~~~~~~~~~~~~~~~~~~~~~~~~~
Linear Search Element :
import java.util.*;
public class linearsearch {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int target = scan.nextInt();
        boolean found = false;
        for(int i=0;i<size;i++){
            if(arr[i] == target){
                found = true;
                break;
            }
        }
        if(found){
            System.out.println("found");
        }
        else{
            System.out.println("Not found");
        }
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Majorty Element :

import java.util.*;
public class MajorityElement {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int [] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int count =1;
        int result = arr[0];
        for(int i=1;i<size;i++){
            if(arr[i] == result){
                count++;
            }
            else{
                count--;
            }
            if(count ==0){
                result=arr[i];
                count =1;
            }
        }
        count = 0;
        for(int i : arr){
            if(i == result){
                count++;
            }
        }
            if(count>size/2){
                System.out.println("The majority element is :"+result);
            }
            else{
                System.out.println("The majority element is not found");
        }
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Make Arrays is Empty : 

import java.util.Scanner;
public class MakeArrayEmpty {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read number of elements
        int n = scanner.nextInt();
        int[] nums = new int[n];

        // Read array
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        int operations = 0;
        int size = n;
        int start = 0;

        while (size > 0) {
            // Find the minimum value in current window
            int min = Integer.MAX_VALUE;
            for (int i = 0; i < size; i++) {
                min = Math.min(min, nums[(start + i) % n]);
            }

            if (nums[start] == min) {
                // Remove the front element
                start = (start + 1) % n;
                size--;
            } else {
                // Rotate: move front to end
                int temp = nums[start];
                for (int i = 0; i < size - 1; i++) {
                    nums[(start + i) % n] = nums[(start + i + 1) % n];
                }
                nums[(start + size - 1) % n] = temp;
                // start remains same
            }
            operations++;
        }
        System.out.println(operations);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Matrix Array :

import java.util.*;
public class MatrixArray{
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int m = scan.nextInt();
        int[][] arr = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = scan.nextInt();
            }
        }
        for(int i=0;i<n;i++){
            int max = 0;
            for(int j=0;j<m;j++){
                if(arr[i][j]>max){
                    max = arr[i][j];
                }
                
            }
        System.out.print(max+" ");
        }

    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Max Array :

import java.util.Scanner;
import java.util.*;
public class MaxArray {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int max = arr[0];
        for(int i=0;i<size;i++){
            if(max < arr[i]){
                max = arr[i];
            }
        }
        System.out.println(max);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Maximum difference of the Array :

import java.util.*;
public class Maximumdiffer {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();  // Input size
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
            arr[i] = scan.nextInt();  // Input array elements
        }
        int minElement = arr[0];
        int maxDiff = Integer.MIN_VALUE;
        for(int i = 1; i < n; i++) {
            if(arr[i] - minElement > maxDiff) {
                maxDiff = arr[i] - minElement;
            }
            if(arr[i] < minElement) {
                minElement = arr[i];
            }
        }
        System.out.println("Maximum difference = " + maxDiff);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Maximum profit in the Array :

import java.util.*;
public class Maxprofit{
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int [] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = scan.nextInt();
        }
        int maxprofit = Maxprofit(arr,n);
        System.out.println(maxprofit);
    }
    public static int Maxprofit(int[] arr,int n){
        int profit =0;
        for(int i=1;i<n;i++){
            if(arr[i] > arr[i-1]){
                profit += arr[i] - arr[i-1];
            }
        }
        return profit;
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Maximum value to Min value :

import java.util.*;
public class Maxtominvalue {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int d =0;
        for(int i=0;i<size;i++){
            if(arr[i]!= 0){
                    arr[d++] = arr[i];
                }
            }
            for(int j=d;j<size;j++){
                arr[j] =0;
            }
        System.out.println(Arrays.toString(arr));
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Merge Two Array :

import java.util.*;
public class MergeArray {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] arr1 = new int[n];
        for (int i = 0; i < n; i++) {
            arr1[i] = scan.nextInt();
        }
        int m = scan.nextInt();
        int[] arr2 = new int[m];
        for (int j = 0; j < m; j++) {
            arr2[j] = scan.nextInt();
        }
        int[] result = new int[n + m];
        // Copy arr1 to result
        for (int i = 0; i < n; i++) {
            result[i] = arr1[i];
        }
        // Copy arr2 to result
        for (int i = 0; i < m; i++) {
            result[n + i] = arr2[i];
        }
        // Sort the merged array
        Arrays.sort(result);
        // Print the sorted array
        for (int val : result) {
            System.out.print(val + " ");
        }
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Mide element in Array :

import java.util.*;
public class midelement {
    public static void main(String[] arg){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = scan.nextInt();
        }
        int left = arr[0];
        int right = arr[n-1];
        int max = left+right/2;
        System.out.println(max);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Minmum of the Array value :

import java.util.*;
public class MinArray {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        Arrays.sort(arr);
        int min = arr[0];
        for(int i=0;i<size;i++){
            if(min > arr[i]){
                min = arr[i];
            }
        }
        System.out.println(min);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Palindrome :

import java.util.Scanner;
public class palindrome {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        String str = scan.nextLine();
        String res = "";
        for(int i=str.length()-1;i>=0;i--){
            res += str.charAt(i);
        }
            if(str.equals(res)){
                System.out.print(res+" is palindrome");
            }
            else{
                System.out.print(res+" NOt a palindrome");
            }
    }
}
//another method
/*String res = "";
        for(int i=0;i<=str.length();i++){
            char ch= str.charAt(i);
            res = ch+res;
        }
            if(str.equals(res)){
                System.out.print(res+" is palindrome");
            }
            else{
                System.out.print(res+" NOt a palindrome");
            }*/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Star  pattern :

import java.util.*;
public class Pattern {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        for(int i=1;i<=(n*2)-1;i++){
            for(int j=1;j<=(n*2)-1;j++){
                if(i==j || j==n-i+1){
                System.out.print("*");
                }
            else{
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Remove the Duplicate value in the Array :

import java.util.*;
public class Removeduplicate {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        boolean flag = false;
        for(int i=0;i<size;i++){
            for(int j=0;j<size;j++){
                if(arr[i] == arr[j]){
                    flag = true;
                    break;
                }
            }
        if(flag){
            System.out.print(arr[i]+" ");
        }
        else{
            System.out.print("No duplicate");
            }
        }
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Reverse the String :

import java.util.*;
public class Reversestring {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        String str = scan.nextLine();
        String res = "";
        for(int i=str.length()-1;i>=0;i--){
            res += str.charAt(i);
        }
        System.out.print(res);
    }
}
****************************
Right Rotation of Array:

import java.util.*;
public class Rightrotation {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] =scan.nextInt();
        }
        int rotat = scan.nextInt();
        int j = 1;
        while(j<=rotat){
        for(int i=0;i<size-1;i++){
            int temp = arr[i];
            arr[i] = arr[i+1];
            arr[i+1] = temp;
        }
            j++;
        }
        System.out.println(Arrays.toString(arr));
    }
}
*******************************
Second largest value in the Array :

import java.util.*;
public class Secondlargevalue {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = scan.nextInt();
        }
        int first ,second ;
        first = second = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            if(arr[i] > first){
                second = first;
                first = arr[i];
            }
            if(arr[i]>second && arr[i]!= first){
                second = arr[i];
            }
        }
        System.out.print(second);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sort the Array :

import java.util.*;
public class sortarray {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        for(int i=0;i<size;i++){
            for(int j=i+1;j<size;j++){
            if(arr[i] > arr[j]){
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            }
        }
            for(int i=0;i<size;i++){
                System.out.print(arr[i]+" ");
            }
        }
    }
~~~~~~~~~~~~~~~~~~~~~~~~
String to column Name :

import java.util.*;
public class StringtocolumnName{
public static String ColumnName(int n){
    StringBuilder columnName = new StringBuilder();
    while(n>0){
        n--;
        int remainder = n % 26;
        char currentchar = (char)('A'+ remainder);
        columnName.insert(0,currentchar);
        n = n/26;
    }
    return columnName.toString();
}
public static void main(String[] args){
    Scanner scan = new Scanner(System.in);
    int n = scan.nextInt();
    System.out.println(ColumnName(n));
}
}
*********************
Sub Array :

import java.util.Scanner;
public class Subarray {
        public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        subarray(arr);
    }
    public static void subarray(int[] arr){
        for(int i=0;i<arr.length;i++){
            for(int j=i;j<arr.length;j++){
                System.out.print("[");
                for(int k=i;k<=j;k++){
                    System.out.print(arr[k]+" ");
                    if(k<j){
                        System.out.print(",");
                    }
                }
                System.out.println("]");
            }
        }
    }
}
******************************
Sub set Check value or Not :

import java.util.Scanner;
public class SubsetCheck {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        // Read size of arr1
        int m = sc.nextInt();
        int[] arr1 = new int[m];
        for (int i = 0; i < m; i++) {
            arr1[i] = sc.nextInt();
        }
        // Read size of arr2
        int n = sc.nextInt();
        int[] arr2 = new int[n];
        for (int i = 0; i < n; i++) {
            arr2[i] = sc.nextInt();
        }
        // Check whether arr2 is subset of arr1
        boolean isSubset = true;
        for (int i = 0; i < n; i++) {
            boolean found = false;
            for (int j = 0; j < m; j++) {
                if (arr2[i] == arr1[j]) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                isSubset = false;
                break;
            }
        }
        // Output result
        if (isSubset) {
            System.out.println("arr2[] is subset of arr1[]");
        } else {
            System.out.println("arr2[] is not a subset of arr1[]");
        }
        sc.close();
    }
}
***********************
Sum of an Array :

import java.util.*;
public class sumofarraay {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int sum =0;
        for(int i=0;i<size;i++){
            sum += arr[i];
        }
        System.out.println(sum);
    }
}
// sum of Array using two object
/*import java.util.*;
public class DuplicateElementArray {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int result = SumofArray(arr,size);
        System.out.println(result);
    }
        public static int SumofArray(int arr[],int size){
            int sum = 1 ;
            for(int i=0;i<size;i++){
                sum += arr[i];
            }
            return sum;
        }
}*/
//mutliple of Array using two object
/*import java.util.*;
public class DuplicateElementArray {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int result = SumofArray(arr,size);
        System.out.println(result);
    }
        public static int SumofArray(int arr[],int size){
            int sum = 1 ;
            for(int i=0;i<size;i++){
                sum *= arr[i];
            }
            return sum;
        }
} */
import java.util.*;
public class sumofarray {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] arr1 = new int[n];
        for(int i=0;i<n;i++){
            arr1[i] = scan.nextInt();
        }
        int m = scan.nextInt();
        int[] arr2 = new int[m];
        for(int i=0;i<m;i++){
            arr2[i] = scan.nextInt();
        }
        int sum = 0;
        for(int i=0;i<n;i++){
            sum += arr1[i];
        }
        for(int i=0;i<m;i++){
            sum += arr2[i];
        }
        System.out.print(sum);
    }
}
**************************
Sum of count of the given value :
import java.util.*;
public class SumofCountvalue {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int target = scan.nextInt();
        int sum = 0;
        int count = 0;
        for(int i : arr){
            sum += i;
            count++;
            if(sum>=target){
                break;
            }
        }
        if(sum >= target){
            System.out.print(count);
        }
        else{
            System.out.print("Not Possible");
        }
        }
}
*******************************
Given an array arr[] of integers and a number x, write a program to find the smallest subarray with a sum greater than the given value. 
Example 1
Input:
arr[] = {1, 4, 45, 6, 0, 19}, x = 51
Output:
3
Explanation:
The sum of the subarray {4, 45, 6} is 55, which is greater than the given value 51. So, return 3, the length of the subarray.
Example 2
Input:
arr[] = {1, 2, 4},  x = 8
Output:
Not Possible
Explanation:
The whole array sum is smaller than 8. So, print "Not Possible".
Input format :
The input consists of an integer n, representing the number of elements in the array.
The second line of input consists of n integers, arr[i] representing the array elements, separated by space.
The third line of input consists of the value of x.
Output format :
The output prints the smallest subarray with a sum greater than x, separated by a space.

If no such sum exists, print "Not Possible".
Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ n ≤ 15

0 ≤ arr[i] ≤ 1000

0 ≤ x ≤ 1000

Sample test cases :
Input 1 :
6
1 4 45 6 0 19
51
Output 1 :
3
Input 2 :
3
1 2 4
8
Output 2 :
Not Possible
Auswer :
import java.util.*;
public class sumofsubarray {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int target = scan.nextInt();
        int minlength = Integer.MAX_VALUE;
        for(int i=0;i<size;i++){
            int sum =0;
            for(int j=i;j<size;j++){
                sum += arr[j];
                if(sum > target){
                    int len = j - i+1;
                    minlength = Math.min(minlength , len);
                    break;
                }
            }
        }
        if(minlength == Integer.MAX_VALUE){
            System.out.print("Not Possible");
        }
        else{
            System.out.print(minlength);
        }
    }
}
******************************
Swap the Array element :
import java.util.*;
public class SwapArrayelement {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int pos1 = scan.nextInt();
        int pos2 = scan.nextInt();
        if(pos1<0 || pos2<0 || pos1 >=size || pos2>=size){
            System.out.print("Invalid");
        }
        else{
            int temp = arr[pos1];
            arr[pos1] = arr[pos2];
            arr[pos2] = temp;
            for(int i=0;i<size;i++){
                System.out.print(arr[i]+" ");
            }
        }
    }
}
******************************
Target value of the Array :

import java.util.*;
public class targetvalue {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] num1 = new int[size];
        for(int i=0;i<size;i++){
            num1[i] = scan.nextInt();
        }
        int[] num2 = new int[size];
        for(int i=0;i<size;i++){
            num2[i] = scan.nextInt();
        }
        int target = scan.nextInt();
        for(int i=0;i<size;i++){
            for(int j=i+1;j<size-1;j++){
                int result = num1[i]+num2[j];
                if(result == target){
                System.out.println(num1[i] + " " + num2[j]);
                }
            }
        }
    }
}
*********************************
Unique Digits:
import java.util.*;
public class Uniquedigit{
public static void main(String[] args){
    Scanner scan = new Scanner(System.in);
    int x = scan.nextInt();
    int y = scan.nextInt();
    for(int i=x;i<=y;i++){
        if(hasUniquedigits(i)){
            System.out.print(i+" ");
        }
    }
}
public static boolean hasUniquedigits(int n){
    boolean[] arr = new boolean[10];
    while(n>0){
        int digit = n % 10;
        if(arr[digit]){
            return false;
        }
        arr[digit] = true;
        n = n/10;
    }
    return true;
}
}
*****************************
Vaild parentheses :

import java.util.Scanner;
public class ValidParentheses {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        System.out.println(isValid(s));
    }
    public static boolean isValid(String s) {
        char[] stack = new char[s.length()];
        int top = -1;
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                stack[++top] = c; // push to stack
            } else {
                if (top == -1) return false; // unmatched closing bracket
                char open = stack[top--]; // pop from stack
                if ((c == ')' && open != '(') ||
                    (c == '}' && open != '{') ||
                    (c == ']' && open != '[')) {
                    return false;
                }
            }
        }
        return top == -1; // stack should be empty if valid
    }
}
**************************
Write a program that calculates the median of a given array of integers. The program should prompt the user to input the size of the array followed by the array elements. 
The median is defined as the middle element of a sorted array if the array has an odd number of elements. 
If the array has an even number of elements, the median is the average of the two middle elements.
Input format
The first line of input consists of the array size.
The second line of input consists of an array of elements, separated by space.
Output format :
The output returns the median of elements, rounded off to two decimal places.
Sample test cases :
Input 1 :
7
1 2 3 4 5 6 7
Output 1 :
4.00
Input 2 :
6
9 8 7 4 5 2
Output 2 :
6.00
Answer :
return the Double value :
import java.util.*;
public class work {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scan.nextInt();
        }
        Arrays.sort(arr);
        double median;
        if (n % 2 == 1) {
            median = arr[n / 2];
        } else {
            median = (arr[n / 2 - 1] + arr[n / 2]) / 2.0;
        }
        System.out.printf("%.2f\n", median);
    }
}
************************************
Write a program using recursion to return the number of ways to express x as a sum of nth powers of unique natural numbers.
Example 1
Input:
10
2
Output: 
1
Explanation:
x = 10
n = 2
10 = 12 + 32, hence we have only 1 possibility.
Example 2
Input:
100
2
Output:
3
Explanation:
x = 100
n = 2
100 = 102 OR 62 + 82 OR 12 + 32 + 42 + 52 + 72, hence total 3 possibilities.
Function Specifications: getAllWays(int, int, int)
Input format :
The first line of input consists of the integer x.
The second line consists of the integer n.
Output format :
The output is the number of ways to express x as a sum of nth powers of unique natural numbers.
Refer to the sample output for formatting specifications.
Code constraints :
1 ≤ x ≤ 105
1 ≤ n ≤ 5
Sample test cases :
Input 1 :
100
2
Output 1 :
3
Input 2 :
10
2
Output 2 :
1
Input 3 :
109
5
Output 3 :
0
Answer :
import java.util.*;
public class uniquenaturalnumbers{
    // Recursive function to count the number of ways
    static int getAllWays(int x, int n, int num) {
        int power = (int)Math.pow(num, n);
        if (power > x) return 0;
        if (power == x) return 1;
        // Include num or exclude num
        return getAllWays(x - power, n, num + 1) + getAllWays(x, n, num + 1);
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int x = scan.nextInt();
        int n = scan.nextInt();
        int result = getAllWays(x, n, 1);
        System.out.println(result);
    }
}
**********************************
