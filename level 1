Anagram :
import java.util.Arrays;
import java.util.Scanner;
public class Anagram {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        String str1 = scan.nextLine();
        String str2 = scan.nextLine();;
        char[] array1 = str1.toCharArray();
        char[] array2 = str2.toCharArray();
        Arrays.sort(array1);
        Arrays.sort(array2);
            if(Arrays.equals(array1, array2)){
                System.out.print("true");
            }
            else{
                System.out.print("false");
        }
    }
}
//another method
/*public static boolean isAnagram(String str1, String str2){
        int freq[] = new int[26];
        for(char ch : str1.toCharArray()){
            freq[ch-'a']++;
        }
        for(char ch :str2.toCharArray()){
            freq[ch-'a']--;
        }
        for(int n : freq){
            if(n != 0){
                return false;
            }
        }
        return true;
    }
}*/
~~~~~~~~~~~~~~~~~~~~~
2D array :
import java.util.*;
public class array2D {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int m = scan.nextInt();
        int[][] arr = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                arr[i][j] = scan.nextInt();
            }
        }for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
        System.out.print(arr[i][j]+" ");
            }
            System.out.println();
        }
    }
}
~~~~~~~~~~~~~~~~~~~
Binary search :

import java.util.*;
public class Binarysearch {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int [] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        Arrays.sort(arr);
        int key = scan.nextInt();
        boolean found = false;
        int start = 0, end = size-1;
        while(start <= end){
            int mid = (start + end)/2;
            if (arr[mid] == key) {
                found = true;
                break;
            }
            else if(arr[mid] < key){
                start = start+1;
            }
            else{
                end = end - 1;
            }
        }
        System.out.print(found);
    }
}
~~~~~~~~~~~~~~~~
  Binary string :
import java.util.*;
public class BinaryString {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        // Find the number of bits in the binary representation
        int numBits = Integer.toBinaryString(n).length();
        // Create a mask with all bits set to 1 for that length
        int mask = (1 << numBits) - 1;
        // Toggle bits using XOR with mask
        int result = n ^ mask;
        System.out.println(result);
    }
}
~~~~~~~~~~~~~~~
Boxpattern :

import java.util.*;
public class Boxpattern{
    public static void main(String [] args){
        Scanner scan = new Scanner(System.in);
        int num = scan.nextInt();
        for(int row=1;row<=num;row++){
            for(int col=1;col<=num;col++){
                if(row==1 || col==1 || row==num || col==num)
                    System.out.print(col);
                else
                    System.out.print(" ");
            }
            System.out.println();
        }
    }
}
~~~~~~~~~~~~~~
Calculate the factorial :

import java.util.*;
public class Calculatefactorial {
    // Function to calculate factorial
    public static int factorial(int num) {
        int fact = 1;
        for(int i = 2; i <= num; i++) {
            fact *= i;
        }
        return fact;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        if(N < 2 || N >= 10) {
            System.out.println("Invalid input");
            return;
        }
        int result = 2 * factorial(N - 1);
        System.out.println(result);
    }
}
~~~~~~~~~~~~~~
Character triangle pattern :

import java.util.*;
public class charactertriangle {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        String str = scan.next();
        for(int row=0;row<str.length();row++){
            for(int col=0;col<=row;col++){
                System.out.print(str.charAt(col));
            }
            System.out.println();
        }
    }
}
~~~~~~~~~~~~~~~~
Check valid password or Not :

import java.util.*;
public class Checkvalidpassword {
    public static void main(String[] atgs){
        Scanner scan = new Scanner(System.in);
        String str = scan.nextLine();
        if(isValidpassword(str)){
            System.out.print(str+" is a valid password");
        }
        else{
            System.out.print(str+" is an inValid password");
        }
    }
    public static boolean isValidpassword(String str){
        String res = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=!])(?=\\s+$).{8,20}$";
        return str.matches(res);
    }
    // Another method to check password validity without regex
    public static boolean isValidPasswordSimple(String str) {
        if (str.length() < 8 || str.length() > 20) return false;
        boolean hasDigit = false, hasLower = false, hasUpper = false, hasSpecial = false, hasWhitespace = false;
        String specialChars = "@#$%^&+=!";
        for (char c : str.toCharArray()) {
            if (Character.isDigit(c)) hasDigit = true;
            else if (Character.isLowerCase(c)) hasLower = true;
            else if (Character.isUpperCase(c)) hasUpper = true;
            else if (specialChars.indexOf(c) >= 0) hasSpecial = true;
            else if (Character.isWhitespace(c)) hasWhitespace = true;
        }
        return hasDigit && hasLower && hasUpper && hasSpecial && !hasWhitespace;
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~
count the integer :

import java.util.*;
public class countinteger {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        System.out.print((" "+n+" ").length());
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~
Delete the duplicate in an array : 

import java.util.Arrays;
import java.util.Scanner;
public class Deleteduplicate {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] num = new int[n];
        for(int i = 0; i < n; i++){
            num[i] = scan.nextInt();
        }
        int result = removeDuplicates(num);
        for(int i = 0; i < result; i++){
            System.out.print(num[i] + " ");
        }
    }
    public static int removeDuplicates(int[] num){
        Arrays.sort(num); // Make sure duplicates are adjacent
        int len = num.length;
        if(len == 0){
            return 0;
        }
        int j = 0;
        for(int i = 1; i < len; i++){
            if(num[i] != num[j]){
                j++;
                num[j] = num[i];
            }
        }
        return j + 1; // return the new length after loop completes
    }
}
~~~~~~~~~~~~~~~~~~~~~~~
Down triangle pattern :

import java.util.*;
public class Downtriangle {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        for(int i=n;i>=1;i--){
            for(int j=1;j<=i;j++){
                System.out.print(j);
            }
            for(int k=1;k<=2*(n-i);k++){
                System.out.print(" ");
            }
            for(int j=i;j>=1;j++){
                System.out.print(j);
            }
            System.out.println();
        }
    }
}
~~~~~~~~~~~~~~~~~~~~~
Duplicate Element in the Array :

import java.util.*;
public class DuplicateElementArray {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int result = Duplicatevalue(arr,size);
        System.out.println(result);
    }
        public static int Duplicatevalue(int arr[],int size){
        /*  for(int i=0;i<size;i++){
                int index = Math.abs(arr[i]);
                if(arr[index] < 0){
                    return index;
                }
                arr[index] = -arr[index];
            }
            return -1;
        }*/
        for(int i = 0; i < size; i++) {
        for(int j = i + 1; j < size; j++) {
            if(arr[i] == arr[j]) {
            return arr[i];
            }
        }
    }
            return -1;
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~
Exactly didvide :
import java.util.*;
public class Exactlydivide {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int target = scan.nextInt();
        int great =0;
        int less =0;
        int divide =0;
        for(int i=0;i<size;i++){
            if(arr[i] > target){
                great++;
            }
            else if(arr[i] < target){
                less++;
            }
            else if(arr[i] % target == 0){
                divide++;
            }
        }
        System.out.println("greaster : "+great);
        System.out.println("lesser : "+less);
        System.out.println("Exactly divide : "+divide);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~
Flames game :
import java.util.*;
public class flames {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String str1 = scan.nextLine().toLowerCase();
        String str2 = scan.nextLine().toLowerCase();
        StringBuilder name1 = new StringBuilder(str1);
        StringBuilder name2 = new StringBuilder(str2);
        for(int i=0;i<name1.length();i++){
            char ch = name1.charAt(i);
            int idx = name2.indexOf(String.valueOf(ch));
            if(idx != -1){
                name1.deleteCharAt(i);
                name2.deleteCharAt(idx);
                i++;
            }
        }
        int count = name1.length() + name2.length();
        String flames = "FLAMES";
        String[] result = {"Friends","Love","Affection","Marriage","Enemy","Sibling"};
        int idx = 0;
        int len = flames.length();
        while(len > 1){
            idx = (count % len == 0) ? len -1 : (count % len) - 1;
            flames = flames.substring(idx + 1) + flames.substring(0, idx);
            len = flames.length();
        }
        char res = flames.charAt(0);
        String output = "";
        switch (res){
            case 'F': output = "Friends";
            break;
            case 'L': output = "Love";
            break;
            case 'A': output = "Affection";
            break;
            case 'M': output = "Marriage";
            break;
            case 'E': output = "Enemy";
            break;
            case 'S': output = "Sibling";
            break;
        }
        System.out.print(output);
    }
}
//Anthor method of the flames :

import java.util.*;
public class FlamesGame {
    // Function to find out the flames result
    public static void flame(char[] a, char[] b) {
        int l = 1, sc = 0, rc = 0, fc = 5;
        String f = "flames";
        char[] flames = f.toCharArray();
        String q = new String(a);
        String w = new String(b);
        int n = a.length;
        int m = b.length;
        int tc = n + m;
        for (int i = 0; i < n; i++) {
            char c = a[i];
            for (int j = 0; j < m; j++) {
                if (c == b[j]) {
                    a[i] = b[j] = '-'; // mark the matched characters with '-'
                    sc += 2;
                    break;
                }
            }
        }
        rc = tc - sc;
        int i = 0;
        while (i >= 0) {
            if (l == rc) {
                for (int k = i; k < f.length()-1; k++) {
                    flames[k] = flames[k + 1];
                }
                flames[flames.length-1] = '0';
                fc--;
                i--;
                l = 0;
            }
            if (i == fc) {
                i = -1;
            }
            if (fc == 0) {
                break;
            }
            l++;
            i++;
        }
        // Print the results
        char result = flames[0];
        switch (result) {
            case 'e':
                System.out.println(q + " is ENEMY to " + w);
                break;
            case 'f':
                System.out.println(q + " is FRIEND to " + w);
                break;
            case 'm':
                System.out.println(q + " is going to MARRY " + w);
                break;
            case 'l':
                System.out.println(q + " is in LOVE with " + w);
                break;
            case 'a':
                System.out.println(q + " has more AFFECTION on " + w);
                break;
            default:
                System.out.println(q + " and " + w + " are SISTERS/BROTHERS ");
                break;
        }
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String a = scan.nextLine();
        String b = scan.nextLine();
        char[] charA = a.toCharArray();
        char[] charB = b.toCharArray();
        flame(charA, charB);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~
Calculate the GCD values : 

import java.util.*;
public class GCD {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n1 = scan.nextInt();
        int n2 = scan.nextInt();
        int gcd = 1;
        for(int i=1;i<=n1 && i<=n2;i++){
            if(n1%i == 0 && n2%i == 0){
                gcd =i;
            }
        }
        System.out.println(gcd);
    }
}
//another method 
while(n1 != n2){
    if(n1 > n2){
        n1 = n1- n2;
    }
    if(n2 > n1){
        n2 = n2 - n1;
    }
}
System.out.print(n1);
}
}
~~~~~~~~~~~~~~~~~~~~
Calculate the LCM value :

import java.util.*;
public class LCM {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int a = scan.nextInt();
        int b = scan.nextInt();
        int lcm = (a*b)/gcd(a,b);
        System.out.print(lcm);
    }
    public static int gcd(int a,int b){
        while(b != 0){
            int temp = b;
            b = a%b;
            a = temp;
        }
        return a;
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Largest Row from Column sum :

import java.util.Scanner;
public class LargestRowColumnSum {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int R = scan.nextInt();
        int C = scan.nextInt();
        int[][] matrix = new int[R][C];
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                matrix[i][j] = scan.nextInt();
            }
        }
        int maxRowSum = 0;
        for (int i = 0; i < R; i++) {
            int rowSum = 0;
            for (int j = 0; j < C; j++) {
                rowSum += matrix[i][j];
            }
            if (rowSum > maxRowSum) {
                maxRowSum = rowSum;
            }
        }
        int maxColSum = 0;
        for (int j = 0; j < C; j++) {
            int colSum = 0;
            for (int i = 0; i < R; i++) {
                colSum += matrix[i][j];
            }
            if (colSum > maxColSum) {
                maxColSum = colSum;
            }
        }
        int result = maxRowSum + maxColSum;
        System.out.println(result);
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~
Left Rotation of Array : 

import java.util.*;
public class Leftrotation {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int rotat = scan.nextInt();
        int j=1;
        while(j<=rotat){
        for(int i=size-1;i>0;i--){
            int temp = arr[i];
            arr[i] = arr[i-1];
            arr[i-1] = temp;
        }
        j++;
    }
            System.out.println(Arrays.toString(arr));
        }
    }
~~~~~~~~~~~~~~~~~~~~~~~~~
Linear Search Element :
import java.util.*;
public class linearsearch {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int size = scan.nextInt();
        int[] arr = new int[size];
        for(int i=0;i<size;i++){
            arr[i] = scan.nextInt();
        }
        int target = scan.nextInt();
        boolean found = false;
        for(int i=0;i<size;i++){
            if(arr[i] == target){
                found = true;
                break;
            }
        }
        if(found){
            System.out.println("found");
        }
        else{
            System.out.println("Not found");
        }
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~
